name: Java App CI/CD for Azure Kubernetes Deployment


on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  sonar:
    name: Sonar CodeCheck
    #if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  ## Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  ## Needed to get PR information, if any #
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

  artifact:
    name: ACR image build and push
    #if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [sonar]
    env:
       IMAGE_NAME: springboot-petclinic-actions
       REGISTRY_NAME: pwcinfradockerrg
       REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
       REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
       TAGS: v2

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven

      # exection permission
    - name: adding execution mode
      run: chmod +x mvnw

    - name: Build with Maven Wrapper
      run: ./mvnw clean install

    - name: ACR login
      uses: azure/docker-login@v1
      with:
            login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: change to server directory and build
      run: |-
        cd spring-petclinic-server ; 
        mvn clean package docker:build
    
    - name: tagging the image to push to ACR
      run: |-
        docker tag $IMAGE_NAME ${{ env.REGISTRY_NAME }}.azurecr.io/$IMAGE_NAME:$TAGS
        
    - name: Push image to ACR
      
      run: |-
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/$IMAGE_NAME:$TAGS

  Deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [sonar, artifact]
    env:
       REGISTRY_NAME: pwcinfradockerrg
       IMAGE_NAME: springboot-petclinic-actions
       CLUSTER_NAME: aks-terraform1
       CLUSTER_RESOURCE_GROUP: terraform-aks1
       NAMESPACE: default
       TAGS: v1

    steps:
    - uses: actions/checkout@v2
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/deployment.yml
          manifests/service.yml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/$IMAGE_NAME:$TAGS
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}  

  Dast:
    - name: OWASP ZAP Full Scan
   # You may pin to the exact commit or the version.
  # uses: zaproxy/action-full-scan@1f35897c4c11af6b1203c36b67a5ba99c3c5b5f4
    - uses: zaproxy/action-full-scan@v0.3.0
      with:
        token: ${{ github.token }}
    # Target URL
        target: http://20.190.250.28:8080/
